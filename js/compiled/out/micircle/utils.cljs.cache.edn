{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name micircle.utils, :imports nil, :requires {http cljs-http.client, cljs-http.client cljs-http.client, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async}, :defs {radial-scale {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/utils.cljs", :line 6, :column 7, :end-line 6, :end-column 19, :arglists (quote ([[lower-domain upper-domain] [lower-range upper-range]]))}, :name micircle.utils/radial-scale, :variadic false, :file "src/cljs/micircle/utils.cljs", :end-column 19, :method-params ([p__14463 p__14464]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[lower-domain upper-domain] [lower-range upper-range]]))}, parse-pos {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/utils.cljs", :line 11, :column 7, :end-line 11, :end-column 16, :arglists (quote ([pos]))}, :name micircle.utils/parse-pos, :variadic false, :file "src/cljs/micircle/utils.cljs", :end-column 16, :method-params ([pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pos]))}, protein-length {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/utils.cljs", :line 16, :column 7, :end-line 16, :end-column 21, :arglists (quote ([accession])), :doc "Fetches the length of a protein."}, :name micircle.utils/protein-length, :variadic false, :file "src/cljs/micircle/utils.cljs", :end-column 21, :method-params ([accession]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([accession])), :doc "Fetches the length of a protein."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur :with-credentials? :accession :length :body}, :order [:with-credentials? :body :accession :length :recur :else]}, :doc nil}