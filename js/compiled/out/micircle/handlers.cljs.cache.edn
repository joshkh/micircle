;; Analyzed by ClojureScript 1.7.228
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name micircle.handlers, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, db micircle.db, micircle.db micircle.db, http cljs-http.client, cljs-http.client cljs-http.client, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async}, :defs {padding {:name micircle.handlers/padding, :file "src/cljs/micircle/handlers.cljs", :line 31, :column 1, :end-line 31, :end-column 13, :meta {:file "/home/josh/prod/micircle/src/cljs/micircle/handlers.cljs", :line 31, :column 6, :end-line 31, :end-column 13}}, space-around-circle {:protocol-inline nil, :meta {:file "/home/josh/prod/micircle/src/cljs/micircle/handlers.cljs", :line 33, :column 7, :end-line 33, :end-column 26, :arglists (quote ([data]))}, :name micircle.handlers/space-around-circle, :variadic false, :file "src/cljs/micircle/handlers.cljs", :end-column 26, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, divide-circle {:protocol-inline nil, :meta {:file "/home/josh/prod/micircle/src/cljs/micircle/handlers.cljs", :line 44, :column 7, :end-line 44, :end-column 20, :arglists (quote ([data]))}, :name micircle.handlers/divide-circle, :variadic false, :file "src/cljs/micircle/handlers.cljs", :end-column 20, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, space-text {:protocol-inline nil, :meta {:file "/home/josh/prod/micircle/src/cljs/micircle/handlers.cljs", :line 52, :column 7, :end-line 52, :end-column 17, :arglists (quote ([data]))}, :name micircle.handlers/space-text, :variadic false, :file "src/cljs/micircle/handlers.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:initialize-db :else :participants :interactorRef :start :recur :shape-data :jamiobj :load-data :with-credentials? :nodes :label :id :length :interactors :end :body :calculate-pieces :text-position :handle-data :view :data :calculate-view}, :order [:initialize-db :handle-data :shape-data :calculate-pieces :calculate-view :jamiobj :interactors :id :data :end :start :length :text-position :view :nodes :load-data :with-credentials? :body :recur :else :participants :interactorRef :label]}, :doc nil}