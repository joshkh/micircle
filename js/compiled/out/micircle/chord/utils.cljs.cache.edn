{:use-macros nil, :excludes #{}, :name micircle.chord.utils, :imports nil, :requires nil, :uses nil, :defs {pi {:name micircle.chord.utils/pi, :file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :line 3, :column 1, :end-line 3, :end-column 8, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :line 3, :column 6, :end-line 3, :end-column 8}}, center {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :line 5, :column 7, :end-line 5, :end-column 13, :arglists (quote ([width height])), :doc "Return a CSS transformation for centering an element."}, :name micircle.chord.utils/center, :variadic false, :file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :end-column 13, :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height])), :doc "Return a CSS transformation for centering an element."}, polar-to-cartesian {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :line 10, :column 7, :end-line 10, :end-column 25, :arglists (quote ([center-x center-y radius angle-in-degrees])), :doc "Convert polar coordinates to cartesian coordinates.\n  TODO: confirm that x and y should not be reversed."}, :name micircle.chord.utils/polar-to-cartesian, :variadic false, :file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :end-column 25, :method-params ([center-x center-y radius angle-in-degrees]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 4, :fn-var true, :arglists (quote ([center-x center-y radius angle-in-degrees])), :doc "Convert polar coordinates to cartesian coordinates.\n  TODO: confirm that x and y should not be reversed."}, describe-link {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :line 18, :column 7, :end-line 18, :end-column 20, :arglists (quote ([x y radius start-angle-1 end-angle-1 start-angle-2 end-angle-2])), :doc "Build an SVG path that describes a link between two arcs."}, :name micircle.chord.utils/describe-link, :variadic false, :file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :end-column 20, :method-params ([x y radius start-angle-1 end-angle-1 start-angle-2 end-angle-2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 7, :fn-var true, :arglists (quote ([x y radius start-angle-1 end-angle-1 start-angle-2 end-angle-2])), :doc "Build an SVG path that describes a link between two arcs."}, describe-arc {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :line 32, :column 7, :end-line 32, :end-column 19, :arglists (quote ([x y radius start-angle end-angle & [upright?]])), :doc "Build an SVG path that describes a circular arc. Arcs are drawn clockwise\n  or counter-clockwise to remain upright (useful for things like textpaths).", :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(x y radius start-angle end-angle [upright?])], :arglists ([x y radius start-angle end-angle & [upright?]]), :arglists-meta (nil)}}, :name micircle.chord.utils/describe-arc, :variadic true, :file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(x y radius start-angle end-angle [upright?])], :arglists ([x y radius start-angle end-angle & [upright?]]), :arglists-meta (nil)}, :method-params [(x y radius start-angle end-angle [upright?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 5, :fn-var true, :arglists ([x y radius start-angle end-angle & [upright?]]), :doc "Build an SVG path that describes a circular arc. Arcs are drawn clockwise\n  or counter-clockwise to remain upright (useful for things like textpaths)."}, trim-arc {:protocol-inline nil, :meta {:file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :line 44, :column 7, :end-line 44, :end-column 15, :arglists (quote ([center-x center-y radius point-x point-y distance]))}, :name micircle.chord.utils/trim-arc, :variadic false, :file "/home/FILESERVER5/micklem/jkh46/projects/micircle/src/cljs/micircle/chord/utils.cljs", :end-column 15, :method-params ([center-x center-y radius point-x point-y distance]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 6, :fn-var true, :arglists (quote ([center-x center-y radius point-x point-y distance]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :transform :x}, :order [:transform :x :y]}, :doc nil}